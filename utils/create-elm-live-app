#!/bin/sh

project_dir=$1

mkdir $project_dir
cd $project_dir

git init

PORT='$PORT'

cat > package.json << EOL
{
  "name": "${project_dir}",
  "version": "1.0.0",
  "author": "$(git config --get user.name) <$(git config --get user.email)>",
  "license": "MIT",
  "scripts": {
    "postinstall": "elm-tooling install",
    "build": "elm make src/Main.elm  --output=public_html/index.html --optimize",
    "dev": "elm-live src/Main.elm -- --debug",
    "start": "http-server public_html --port=$PORT"
  }
}

EOL

npm install --save-dev elm-tooling elm-live
npm install --save http-server

export PATH=$PATH:node_modules/.bin

yes | elm-tooling init
elm-tooling install
yes | elm init
yes | elm install elm/url

cat > src/Main.elm << EOL
module Main exposing (..)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Url



-- MAIN


main : Program () Model Msg
main =
  Browser.application
    { init = init
    , view = view
    , update = update
    , subscriptions = subscriptions
    , onUrlChange = UrlChanged
    , onUrlRequest = LinkClicked
    }



-- MODEL


type alias Model =
  { key : Nav.Key
  , url : Url.Url
  }


init : () -> Url.Url -> Nav.Key -> ( Model, Cmd Msg )
init flags url key =
  ( Model key url, Cmd.none )



-- UPDATE


type Msg
  = LinkClicked Browser.UrlRequest
  | UrlChanged Url.Url


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
  case msg of
    LinkClicked urlRequest ->
      case urlRequest of
        Browser.Internal url ->
          ( model, Nav.pushUrl model.key (Url.toString url) )

        Browser.External href ->
          ( model, Nav.load href )

    UrlChanged url ->
      ( { model | url = url }
      , Cmd.none
      )



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
  Sub.none



-- VIEW


view : Model -> Browser.Document Msg
view model =
  { title = "URL Interceptor"
  , body =
      [ text "The current URL is: "
      , b [] [ text (Url.toString model.url) ]
      , ul []
          [ viewLink "/home"
          , viewLink "/profile"
          , viewLink "/reviews/the-century-of-the-self"
          , viewLink "/reviews/public-opinion"
          , viewLink "/reviews/shah-of-shahs"
          ]
      ]
  }


viewLink : String -> Html msg
viewLink path =
  li [] [ a [ href path ] [ text path ] ]

EOL

