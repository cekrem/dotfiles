#!/bin/bash

root_path="$HOME/Jottacloud/week"
year_path="$root_path/$(date +%Y)"
mkdir -p "$year_path"

usage=$(
  cat <<EOF
Usage: week
  -e[dit instead of print]
  -c[onfig week template]
  -t[oday]
  -s[hutdown]
  -n[otes for this week]
  -o[verview of all notes]
  -a[ll weeks]
  -i[nbox {something}]
  {@Keyword[ to grep]}

  -e[dit]:
  Use this flag (first!) to open output in vim instead of printing to stdout. Only applicable as standalone (to edit week) or combined with -c or -n.

  -c[onfig]:
  Config week template. Prefix with -e to edit.

  -t[oday]:
  Output only today\'s agenda (excluding Shutdown routine)

  -s[hutdown]:
  Output only today\'s shutdown routine.

  -n[otes for this week]:
  Open up this week\'s notes file (create if it doesn\'t exist).

  -o[verview of all notes]:
  Combine all notes into a single RO temp file (you can follow links to the source file to edit notes).

  -a[ll weeks]:
  Combine all weeks and notes into a single RO temp file (you can follow links to the source file to edit notes).

  -i[nbox {something}]:
  Create a new {something} task and add to this week\'s inbox.

  -u[nassigned (inbox)]
  Show content of inbox.

  @Keyword:
  Filter input (ie | grep @Keyword) before printing

  -h[elp]:
  Show usage.

EOF
)

# Hack to utilize coreutils on mac
if command -v ghead &>/dev/null; then
  function head() {
    ghead $*
  }

  function date() {
    gdate $*
  }

  function sed() {
    gsed $*
  }
fi

# Require GNU versions of head, date, sed
array=(head date sed)
for i in "${array[@]}"; do
  if ! grep -q "GNU" <<<"$($i --version)"; then
    echo "Missing GNU $i, aborting"
    exit 1
  fi
done

default_week=$(
  cat <<EOF
# Monday
- Shutdown day
# Tuesday
- Shutdown day
# Wednesday
- Shutdown day
# Thursday
- Shutdown day
# Friday
- Shutdown week
# Inbox
EOF
)

# Generate week template if none is present
week_template="$HOME/Jottacloud/week/template.md"
if [[ ! -e "$week_template" ]]; then
  echo "$default_week" >"$week_template"
fi

# Generate current week if none is present
current_week="$year_path/$(date +%U).md"
previous_week="$year_path/$(($(date +%U) - 1)).md"
if [[ ! -e "$current_week" ]]; then
  echo "current week does not exist, creating"
  cat "$week_template" >"$current_week"

  # rollover unfinished tasks (- [ ])
  if [[ -e "$previous_week" ]]; then
    echo "rolling over unfinished tasks from previous week..."
    cat "$previous_week" | grep "\[ " >>"$current_week"
  fi
fi

today="$(date +%A)"
next_day_or_inbox="$(date --date=tomorrow +%A | sed 's/Saturday/Inbox/g')"

# Allow filtering on keyword tags (with '@' prefix)
filter=tee
tags="$(echo "$@" | grep -o '@\w\+')"
if [[ ! -z $tags ]]; then
  filter="grep $tags"
fi

cmd=cat

while getopts 'uhecrtsnoai:' flag; do
  case "${flag}" in
  h)
    echo "$usage"
    exit 0
    ;;
  e)
    cmd=vim
    ;;
  c)
    $cmd "$week_template"
    exit 0
    ;;
  r)
    if [ "$(date +%H%M)" -gt 1430 ]; then
      week -s
    else
      week -t
    fi

    week -n
    exit 0
    ;;
  t)
    awk "/$today/, /$next_day_or_inbox/" "$current_week" | head -n -1 | $filter | grep -v 'Shutdown\|  '
    exit 0
    ;;
  s)
    awk "/$today/, /$next_day_or_inbox/" "$current_week" | head -n -1 | $filter | grep 'Shutdown\|  '
    echo
    echo
    week -u
    exit 0
    ;;
  n)
    notes_file="${current_week/.md/.notes.md}"
    if [[ ! -e "$notes_file" ]]; then
      echo "# Notes" >>$notes_file
      echo "# Ideas" >>$notes_file
    fi
    $cmd "$notes_file"
    exit 0
    ;;
  o)
    tail -n +1 $root_path/**/*.notes.md | sed 's/^#/##/g' | sed 's/==>/#/g' | sed 's/<==//g' | $filter | view -c 'set filetype=markdown' -
    exit 0
    ;;
  a)
    tail -n +1 $root_path/**/*.md | sed 's/#/##/g' | sed 's/==>/#/g' | sed 's/<==//g' | $filter | view -c 'set filetype=markdown' -
    exit 0
    ;;
  i)
    something="${OPTARG}"
    echo "- [ ] $something" >>"$current_week"
    echo "$something added to this week!"
    exit 0
    ;;
  u)
    week | grep -A10 "# Inbox"
    exit 0
    ;;
  *)
    echo "$usage"
    exit 1
    ;;
  esac
done

$cmd "$current_week"
